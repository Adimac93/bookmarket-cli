generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  title      String
  author     String
  image      String
  grade      Grade
  subject    Subject
  price      Int
  url        String
  isAdvanced Boolean
  created    DateTime    @default(now())
  isbn       String      @id
  updated    DateTime
  OrderBook  OrderBook[]
  UserBook   UserBook[]
}

model User {
  id          String  @id
  name        String?
  discordId   String? @unique
  facebookId  String? @unique
  googleId    String? @unique
  phoneNumber String? @unique
  Base        Base    @relation(fields: [id], references: [id])
}

model Base {
  id                         String     @id
  created                    DateTime   @default(now())
  updated                    DateTime
  Order_BaseToOrder_buyerId  Order[]    @relation("BaseToOrder_buyerId")
  Order_BaseToOrder_sellerId Order[]    @relation("BaseToOrder_sellerId")
  School                     School?
  User                       User?
  UserBook                   UserBook[]
}

model Order {
  id                        String      @id
  status                    OrderStatus
  sellerId                  String
  buyerId                   String
  created                   DateTime    @default(now())
  updated                   DateTime
  Base_BaseToOrder_buyerId  Base        @relation("BaseToOrder_buyerId", fields: [buyerId], references: [id])
  Base_BaseToOrder_sellerId Base        @relation("BaseToOrder_sellerId", fields: [sellerId], references: [id])
  OrderBook                 OrderBook[]
}

model OrderBook {
  condition Condition
  count     Int
  isbn      String
  orderId   String
  Book      Book      @relation(fields: [isbn], references: [isbn])
  Order     Order     @relation(fields: [orderId], references: [id])

  @@unique([condition, isbn, orderId])
}

model School {
  id     String @id
  name   String
  abbr   String
  city   String
  region String
  schema Json
  Base   Base   @relation(fields: [id], references: [id])
}

model UserBook {
  condition Condition
  count     Int
  isbn      String
  ownerId   String
  Book      Book      @relation(fields: [isbn], references: [isbn])
  Base      Base      @relation(fields: [ownerId], references: [id])

  @@unique([condition, isbn, ownerId])
}

enum Condition {
  NEW
  GOOD
  DAMAGED
  BAD
}

enum Grade {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum Subject {
  MATH
  ENGLISH
  POLISH
  GERMAN
  RUSSIAN
  HISTORY
  CIVICS
  CHEMISTRY
  BIOLOGY
  GEOGRAPHY
  PHYSICS
  COMPUTER_SCIENCE
  ENTREPRENEURSHIP
  EDUCATION_FOR_SAFETY
}

enum OrderStatus {
  PENDING
  DELIVERED
}
